type Book {
  title: String!
  isbn: String
  id: ID!
  cover: String!
  authors: [BookAuthorConnection!]!
  series: [Series!]!
}

type BookAggregate {
  count: Int!
}

type BookPageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

type BookEdgeType {
  node: Book!

  """Used in `before` and `after` args"""
  cursor: String!
}

type BookConnection {
  aggregate: BookAggregate!
  pageInfo: BookPageInfo!
  edges: [BookEdgeType!]!
}

type Series {
  """タイトル"""
  title: String!

  """完結しているか"""
  concluded: Boolean!
  id: ID!
  books(
    order: OrderByDirection

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): SerialSeriesRecordConnection!
  relatedBooks(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): BookConnection!
  relatedAuthors: [Author!]!
}

enum OrderByDirection {
  ASC
  DESC
}

type SeriesAggregate {
  count: Int!
}

type SeriesPageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

type SeriesEdgeType {
  node: Series!

  """Used in `before` and `after` args"""
  cursor: String!
}

type SeriesConnection {
  aggregate: SeriesAggregate!
  pageInfo: SeriesPageInfo!
  edges: [SeriesEdgeType!]!
}

type Author {
  name: String!
  id: ID!
  books(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): BookConnection!
  series(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): SeriesConnection!
}

type BookAuthorConnection {
  roles: [String!]
  author: Author!
}

type BookshelfRecord {
  id: ID!
  book: Book!
}

type BookshelfRecordAggregate {
  count: Int!
}

type BookshelfRecordPageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

type BookshelfRecordEdgeType {
  node: BookshelfRecord!

  """Used in `before` and `after` args"""
  cursor: String!
}

type BookshelfRecordConnection {
  aggregate: BookshelfRecordAggregate!
  pageInfo: BookshelfRecordPageInfo!
  edges: [BookshelfRecordEdgeType!]!
}

type User {
  id: ID!
  auth0Sub: String!
  name: String!
  displayName: String!
  picture: String
  userBookshelves: [Bookshelf!]!
  readBooks: Bookshelf!
  readingBooks: Bookshelf!
  wishBooks: Bookshelf!
}

type Bookshelf {
  id: ID!
  title: String
  type: BookshelfType!
  owner: User!
  total: Int!
  recordsConnection(
    orderBy: OrderByDateInput

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): BookshelfRecordConnection!
}

enum BookshelfType {
  READ
  READING
  WISH
  CREATED
}

input OrderByDateInput {
  createdAt: OrderByDirection
  updatedAt: OrderByDirection
}

type SerialSeriesRecord {
  serial: Float!
  book: Book!
}

type SerialSeriesRecordAggregate {
  count: Int!
}

type SerialSeriesRecordPageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

type SerialSeriesRecordEdgeType {
  node: SerialSeriesRecord!

  """Used in `before` and `after` args"""
  cursor: String!
}

type SerialSeriesRecordConnection {
  aggregate: SerialSeriesRecordAggregate!
  pageInfo: SerialSeriesRecordPageInfo!
  edges: [SerialSeriesRecordEdgeType!]!
}

type Query {
  author(id: ID!): Author!
  allAuthors: [Author!]!
  book(id: ID!): Book!
  allBooks: [Book!]!
  bookshelfRecord(id: ID!): BookshelfRecord
  bookshelf(id: ID!): Bookshelf!
  allBookshelves: [Bookshelf!]!
  search(limit: Int!, query: String!): [MixedSearchResult!]!
  series(id: ID!): Series!
  allSeries: [Series!]!
  user(name: String, id: ID): User!
  currentUser: User!
  allUsers: [User!]!
}

union MixedSearchResult = Author | Series | Book

type Mutation {
  createBookshelfRecord(bookshelf: ID!, book: ID!): BookshelfRecord!
  createUser(createUserData: CreateUserInput!): User!
}

input CreateUserInput {
  name: String
  displayName: String
  picture: String
}
